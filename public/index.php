<?php
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use Slim\Factory\AppFactory;
use Slim\Views\Twig;
use Slim\Views\TwigMiddleware;
use Mailgun\Mailgun;

require __DIR__ . '/../vendor/autoload.php';
require __DIR__ . '/../private/config.php';

$app = AppFactory::create();

$twig = Twig::create(__DIR__ . '/../templates', [
    //'cache' => __DIR__ . '/../cache'
]);

$app->add(TwigMiddleware::create($app, $twig));

$app->get('/', function (Request $request, Response $response, $args) {
    $view = Twig::fromRequest($request);
    $items = [];
    if (($fp = fopen(__DIR__ . "/../storage/index.csv", "r")) !== FALSE) {
        $keys = fgetcsv($fp, 1000, ',');
        while (($values = fgetcsv($fp, 1000, ',')) !== false) {
            $items[] = array_combine($keys, $values);
        }
        fclose($fp);
    }
    return $view->render($response, 'default.twig', [
        'title' => 'Algoritmeregister',
        'description' => 'We werken aan een overzicht van algoritmes, een Algoritmeregister. Door in deze registratie aspecten van algoritmes op een begrijpelijke manier vast te leggen kunnen wij transparantie bieden en verantwoording af leggen. In het register kun je technische elementen terugvinden, zoals de dataverwerking of broncode, maar bijvoorbeeld ook afspraken tussen overheden en leveranciers of bijvoorbeeld een beschrijving van de werking van het algoritme.',
        'items' => $items
    ]);
});

$app->get('/over', function (Request $request, Response $response, $args) {
    $view = Twig::fromRequest($request);
    return $view->render($response, 'over.twig', [
        'title' => 'Over Algoritmeregister'
    ]);
});

$app->get('/aanmelden', function (Request $request, Response $response, $args) {
    $view = Twig::fromRequest($request);
    return $view->render($response, 'aanmelden.twig', [
        'title' => 'Algoritme aanmelden',
        'description' => ''
    ]);
});

$app->post('/aanmelden', function (Request $request, Response $response, $args) use ($config) {
    $uuid = json_decode(file_get_contents("https://www.uuidtools.com/api/generate/v1"))[0];
    $metadata = json_decode(file_get_contents(__DIR__ . "/../data/algoritmeregister-metadata-standaard--autogenerated.json"), true);
    $indexed = [];
    foreach ($metadata as $field) {
        $indexed[$field["eigenschap"]] = $field;
    }

    $data = $request->getParsedBody();
    $organisatie = $data["organisatie"];
    $afdeling = $data["afdeling"];
    $naam = $data["naam"];
    $contact = $data["contact"];
    $type = "onbekend";
    $herziening = date("d-m-Y");

    $maildomain = array_pop(explode('@', $contact));
    if (!in_array($maildomain, $config['known-maildomains'])) {
        return $response->withHeader("Location", "/aanmelden")->withStatus(303);
    }

    $indexed["naam"]["waarde"] = $naam;
    file_put_contents(__DIR__ . "/../storage/{$uuid}." . md5($uuid) . ".json", json_encode($indexed));

    $txt = "\"{$uuid}\",\"{$organisatie}\",\"{$afdeling}\",\"{$naam}\",\"{$type}\",\"{$herziening}\",\"{$contact}\"";
    $myfile = file_put_contents(__DIR__ . "/../storage/index.csv", $txt.PHP_EOL, FILE_APPEND);

    $mgClient = Mailgun::create($config["mailgun-key"], $config["mailgun-url"]);
    $result = $mgClient->messages()->send("algoritmeregister.nl", array(
        'from'	=> 'Algoritmeregister <no-reply@algoritmeregister.nl>',
        'to'	=> $contact,
        'subject' => "Detailpagina {$naam} beschikbaar",
        'text'	=> "Je bent aangemeld als beheerder voor de detailpagina van {$naam} in het Algoritmeregister. Op https://www.algoritmeregister.nl/details/{$uuid} kun je de gegevens bekijken en bijwerken."
    ));
    
    return $response->withHeader("Location", "/details/{$uuid}")->withStatus(303);
});

$app->get('/details/{id}', function (Request $request, Response $response, $args) {
    $view = Twig::fromRequest($request);
    $id = $args['id'];
    $metadata = json_decode(file_get_contents(__DIR__ . "/../storage/{$id}." . md5($id) . ".json"), true);
    $grouped = [];
    foreach ($metadata as $item) {
        $grouped[$item["categorie"]][] = $item;
    }
    return $view->render($response, 'details.twig', [
        'id' => $id,
        'title' => $metadata["naam"]["waarde"],
        'description' => $metadata["beschrijving"]["waarde"],
        'grouped' => $grouped
    ]);
});

$app->get('/data/{id}', function (Request $request, Response $response, $args) {
    $id = $args['id'];
    header("Content-type: text/json");
    readfile(__DIR__ . "/../storage/{$id}." . md5($id) . ".json");
    die;
});

$app->get('/aanpassen/{id}', function (Request $request, Response $response, $args) {
    $view = Twig::fromRequest($request);
    $id = $args['id'];
    $metadata = json_decode(file_get_contents(__DIR__ . "/../storage/{$id}." . md5($id) . ".json"), true);
    $grouped = [];
    foreach ($metadata as $item) {
        $grouped[$item["categorie"]][] = $item;
    }
    return $view->render($response, 'aanpassen.twig', [
        'id' => $id,
        'title' => $metadata["naam"]["waarde"],
        'description' => $metadata["beschrijving"]["waarde"],
        'grouped' => $grouped
    ]);
});

$app->post('/aanpassen/{id}', function (Request $request, Response $response, $args) {
    $id = $args['id'];
    $attributes = json_decode(file_get_contents(__DIR__ . "/../storage/{$id}." . md5($id) . ".json"), true);
    foreach ($request->getParsedBody() as $key => $value) {
        $attributes[$key]["waarde"] = $value;
    }
    file_put_contents(__DIR__ . "/../storage/{$id}." . md5($id) . ".json", json_encode($attributes));
    return $response->withHeader("Location", "/details/{$id}")->withStatus(303);
});

$app->run();
